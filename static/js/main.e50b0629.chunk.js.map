{"version":3,"sources":["js/callApi.js","components/Search.js","components/DetailedResult.js","components/ResultItem.js","components/Results.js","components/PageLink.js","components/Pages.js","App.js","reportWebVitals.js","index.js"],"names":["callApi","type","info","setters","apiUrl","query","page","id","fetch","then","res","ok","json","Error","success","results","total","catch","err","Search","props","handleClick","searched","onChange","e","target","value","onKeyDown","keyCode","onClick","DetailedResult","found","selected","details","title","year","poster","director","writer","actors","rated","runtime","genre","language","country","plot","rating","votes","className","src","alt","map","elem","index","ResultItem","toggleDetails","Results","React","useState","overlay","setOverlay","setSelected","firstRange","lastRange","text","PageLink","data","label","final","PaginationItem","current","PaginationLink","href","data-page","change","Pages","Math","ceil","parseInt","displayedPages","filter","pageChange","preventDefault","newPage","getAttribute","Pagination","aria-label","App","useEffect","window","scrollTo","setResults","setSuccess","setPage","setTotal","setQuery","setSearched","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAAe,SAASA,EAAQC,EAAMC,EAAMC,GACxC,IAAMC,EAAkB,WAATH,EAAA,qDACqCC,EAAKG,MAD1C,iBACwDH,EAAKI,MAC7D,UAATL,EAAA,qDACkDC,EAAKK,IADvD,qDAEkDL,EAAKG,MAFvD,iBAEqEH,EAAKI,MAIhFE,MAAMJ,GACDK,MAAK,SAACC,GACH,GAAKA,EAAIC,GAGL,OAAOD,EAAIE,OAFX,MAAM,IAAIC,SAKjBJ,MAAK,SAACG,GACH,GAAyB,UAArBA,EAAI,SACJ,MAAM,IAAIC,MACM,WAATZ,GACPE,EAAQW,QAAQ,WAChBX,EAAQY,QAAQH,EAAI,QACpBT,EAAQa,MAAMJ,EAAI,cAClBT,EAAQG,KAAKJ,EAAKI,OACF,UAATL,GACPE,EAAQS,MAGfK,OAAM,SAACC,GACS,WAATjB,EACAE,EAAQW,QAAQ,QACA,UAATb,GACPE,EAAQ,yB,WC9BT,SAASgB,EAAOC,GAC3B,IAKQC,EAAc,WAElBD,EAAMjB,QAAQmB,SAASF,EAAMf,OAC7Be,EAAMjB,QAAQW,QAAQ,QACtBd,EAAQ,SAAU,CAAEK,MAAOe,EAAMf,MAAOC,KAAM,GAAKc,EAAMjB,UAY3D,OACE,sBAAKI,GAAG,SAAR,UACE,uBACEN,KAAK,OACLM,GAAG,aACHgB,SA1Ba,SAACC,GAElBJ,EAAMjB,QAAQE,MAAMmB,EAAEC,OAAOC,QAyBzBC,UAfc,SAACH,GAED,KAAdA,EAAEI,SACJP,OAcA,wBAAQd,GAAG,gBAAgBN,KAAK,SAAS4B,QAASR,EAAlD,uBC/BK,SAASS,EAAeV,GAGnC,IAAMW,EAAkC,kBAAnBX,EAAMY,SACvBC,EAAU,GACVC,EAAQ,GACRC,EAAO,GACPC,EAAS,GAGb,GAA8B,kBAAnBhB,EAAMY,SAAuB,CAAC,IAAD,EACuLZ,EAAMY,SAA7MK,EADgB,WACIC,EADJ,SACsBC,EADtB,SACuCC,EADvC,QACyDC,EADzD,UAC2EC,EAD3E,QAC8FC,EAD9F,WACmHC,EADnH,UACoIC,EADpI,OACwJC,EADxJ,aAC6KC,EAD7K,YAEpCb,EAAQd,EAAMY,SAAN,MACRG,EAAOf,EAAMY,SAAN,KACPI,EAAShB,EAAMY,SAAN,OACZC,EAAU,CACP,CAAC,WAAYI,GACb,CAAC,YAAaC,GACd,CAAC,SAAUC,GACX,CAAC,QAASC,GACV,CAAC,UAAWC,GACZ,CAAC,WAAYE,GACb,CAAC,UAAWC,GACZ,CAAC,QAASF,GACV,CAAC,cAAeI,EAAS,cAAgBC,EAAQ,WACjD,CAAC,OAAQF,IAIb,OACI,sBAAKtC,GAAG,mBAAmBsB,QAAS,KAApC,UACI,mBAAGmB,UAAU,sBAAsBzC,GAAG,kBACpCwB,GAAS,4BAAIX,EAAMY,WACpBD,GAAS,qBAAKkB,IAAKb,EAAQc,IAAI,gBAC/BnB,GAAS,sBAAKxB,GAAG,gBAAR,UACN,6BAAK2B,IACL,6BAAKC,IACL,oBAAI5B,GAAG,qBAAP,SACK0B,EAAQkB,KAAI,SAACC,EAAMC,GAAP,OAAiB,qBAAIL,UAAU,qBAAd,UAA+C,8BAAII,EAAK,GAAT,OAA/C,IAAkEA,EAAK,KAA/BC,cCtC3E,SAASC,EAAWlC,GAC/B,OACI,sBAAKb,GAAIa,EAAMiC,MAAOL,UAAU,cAAcnB,QAAST,EAAMmC,cAA7D,UACE,qBAAKN,IAAK7B,EAAMgC,KAAN,OAAsBF,IAAI,cAAcF,UAAU,iBAC5D,mBAAGA,UAAU,eAAb,SAA6B5B,EAAMgC,KAAN,QAC7B,mBAAGJ,UAAU,cAAb,SAA4B5B,EAAMgC,KAAN,UCFvB,SAASI,EAAQpC,GAAO,MAEPqC,IAAMC,UAAS,GAFR,mBAE9BC,EAF8B,KAErBC,EAFqB,OAGLH,IAAMC,SAAS,IAHV,mBAG9B1B,EAH8B,KAGpB6B,EAHoB,KAM/BN,EAAgB,SAAC/B,GACD,qBAAhBA,EAAEC,OAAOlB,KAEc,YAAhBiB,EAAEC,OAAOlB,IAAoC,iBAAhBiB,EAAEC,OAAOlB,IAC/CsD,EAAY,IACZD,GAAW,KAEX5D,EAAQ,QAAS,CAACO,GAAIa,EAAMlB,KAAKa,QAAQS,EAAEC,OAAOlB,IAA5B,QAA4CsD,GAClED,GAAW,MAKTE,EAA+B,GAAlB1C,EAAMlB,KAAKI,KAAY,GACpCyD,EAA8B,GAAlB3C,EAAMlB,KAAKI,KAAYc,EAAMlB,KAAKc,MAClDI,EAAMlB,KAAKc,MACO,GAAlBI,EAAMlB,KAAKI,KACP0D,EACmB,YAAvB5C,EAAMlB,KAAKY,QAAX,0BACuBgD,EADvB,YACqCC,EADrC,eACqD3C,EAAMlB,KAAKc,MADhE,iBAC8EI,EAAMlB,KAAKoB,SADzF,KAE2B,SAAvBF,EAAMlB,KAAKY,QACX,oBACuB,YAAvBM,EAAMlB,KAAKY,QACX,yBACA,GAEN,OACE,uBAAMP,GAAG,UAAT,UAC0B,SAAvBa,EAAMlB,KAAKY,SACV,qBACEmC,IAAI,sCACJC,IAAI,aACJ3C,GAAG,SAGP,mBAAGA,GAAG,sBAAN,SAA6ByD,IACL,YAAvB5C,EAAMlB,KAAKY,SACV,sBAAKP,GAAG,SAASyC,UAAU,cAA3B,UACE,oBAAIA,UAAU,eAAd,oBACA,oBAAIA,UAAU,eAAd,mBACA,oBAAIA,UAAU,gBAAd,qBAGoB,YAAvB5B,EAAMlB,KAAKY,SACVM,EAAMlB,KAAKa,QAAQoC,KAAI,SAACC,EAAMC,GAC5B,OACE,cAACC,EAAD,CACED,MAAOA,EACPD,KAAMA,EACNG,cAAeA,GACVF,MAIZM,GACC,qBAAKpD,GAAG,UAAUsB,QAAS0B,EAA3B,SACE,cAACzB,EAAD,CAAgBE,SAAUA,S,oBChErB,SAASiC,EAAS7C,GAE/B,IAAI8C,EAAuB,SAAhB9C,EAAM+C,MACf,EACgB,SAAhB/C,EAAM+C,MACN/C,EAAMgD,MACNhD,EAAM+C,MAER,OACE,cAACE,EAAA,EAAD,CACErB,UAAW5B,EAAMkD,UAAYlD,EAAM+C,MAAQ,mBAAqB,YADlE,SAGE,cAACI,EAAA,EAAD,CACEC,KAAK,IACLC,YAAWP,EACXrC,QAAST,EAAMsD,OAHjB,SAKGtD,EAAM+C,U,YCfA,SAASQ,EAAMvD,GAE5B,IAAMgD,EAAQQ,KAAKC,KAAKzD,EAAMlB,KAAKc,MAAQ,IACrCsD,EAAUQ,SAAS1D,EAAMlB,KAAKI,MAc9ByE,EAXc,CAClB,OACAT,EAAU,EACVA,EAAU,EACVA,EACAA,EAAU,EACVA,EAAU,EACV,QAIiCU,QACjC,SAAC5B,GAAD,OAAW,EAAIA,GAAQA,GAAQgB,GAA0B,kBAAThB,KAG5C6B,EAAa,SAACzD,GAElBA,EAAE0D,iBAGF,IAAMC,EAAU3D,EAAEC,OAAO2D,aAAa,aAEtCpF,EAAQ,SAAU,CAAEK,MAAOe,EAAMlB,KAAKoB,SAAUhB,KAAM6E,GAAW/D,EAAMjB,UAGzE,OACE,cAACkF,EAAA,EAAD,CAAYC,aAAW,qBAAqB/E,GAAG,iBAA/C,SACGwE,EAAe5B,KAAI,SAACC,EAAMC,GACzB,OACE,cAACY,EAAD,CAEEK,QAASA,EACTH,MAAOf,EACPgB,MAAOA,EACPM,OAAQO,GAJH5B,QCYFkC,MAhDf,WAEG9B,IAAM+B,WAAU,WACfC,OAAOC,SAAS,EAAG,MAHR,MAOiBjC,IAAMC,SAAS,IAPhC,mBAON3C,EAPM,KAOG4E,EAPH,OAQiBlC,IAAMC,SAAS,WARhC,mBAQN5C,EARM,KAQG8E,EARH,OASWnC,IAAMC,SAAS,GAT1B,mBASNpD,EATM,KASAuF,EATA,OAUapC,IAAMC,SAAS,GAV5B,mBAUN1C,EAVM,KAUC8E,EAVD,OAWarC,IAAMC,SAAS,IAX5B,mBAWNrD,EAXM,KAWC0F,EAXD,OAYmBtC,IAAMC,SAAS,IAZlC,mBAYNpC,EAZM,KAYI0E,EAZJ,KAcb,OACE,sBAAKzF,GAAG,MAAR,UACE,yBAAQA,GAAG,SAAX,UACE,sCACM,sBAAMA,GAAG,OAAT,qBAEN,cAACY,EAAD,CACEhB,QAAS,CACPY,QAAS4E,EACT7E,QAAS8E,EACTtF,KAAMuF,EACN7E,MAAO8E,EACPzF,MAAO0F,EACPzE,SAAU0E,GAEZ3F,MAAOA,OAGX,cAACmD,EAAD,CAAStD,KAAM,CAAEa,UAASD,UAASQ,WAAUN,QAAOV,UACvC,YAAZQ,GACC,cAAC6D,EAAD,CACEzE,KAAM,CAAEI,OAAMU,QAAOM,YACrBnB,QAAS,CACPY,QAAS4E,EACT7E,QAAS8E,EACTtF,KAAMuF,EACN7E,MAAO8E,SCjCJG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1F,MAAK,YAAkD,IAA/C2F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e50b0629.chunk.js","sourcesContent":["export default function callApi(type, info, setters) {\r\n    const apiUrl = type === \"search\"\r\n        ? `https://www.omdbapi.com/?apikey=63655755&s=${info.query}&page=${info.page}`\r\n        : type === \"title\"\r\n            ? `https://www.omdbapi.com/?apikey=63655755&i=${info.id}`\r\n            : `https://www.omdbapi.com/?apikey=63655755&s=${info.query}&page=${info.page}`;\r\n\r\n\r\n    // fetches list of 20 books based on entered query and page number (default page 1) or fetches detailed info for one specific title\r\n    fetch(apiUrl)\r\n        .then((res) => {\r\n            if (!res.ok) {\r\n                throw new Error();\r\n            } else {\r\n                return res.json();\r\n            }\r\n        })\r\n        .then((json) => {\r\n            if (json[\"Response\"] === \"False\") {\r\n                throw new Error();\r\n            } else if (type === \"search\") {\r\n                setters.success(\"success\");\r\n                setters.results(json[\"Search\"]);\r\n                setters.total(json[\"totalResults\"]);\r\n                setters.page(info.page);\r\n            } else if (type === \"title\") {\r\n                setters(json);\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            if (type === \"search\") {\r\n                setters.success(\"fail\");\r\n            } else if (type === \"title\") {\r\n                setters(\"No info available.\");\r\n            }\r\n        });\r\n};","import React from 'react';\r\nimport callApi from '../js/callApi';\r\n\r\nexport default function Search(props) {\r\n    const handleChange = (e) => {\r\n        // update query state in app based on user entry\r\n        props.setters.query(e.target.value);\r\n      };\r\n    \r\n      const handleClick = () => {\r\n        // on click of search button, bring up loading animation and call API endpoiiont\r\n        props.setters.searched(props.query);\r\n        props.setters.success(\"load\");\r\n        callApi(\"search\", { query: props.query, page: 1 }, props.setters);\r\n      };\r\n    \r\n      const handleEnter = (e) => {\r\n        // allows enter key yto trigger search as well\r\n        if (e.keyCode === 13) {\r\n          handleClick();\r\n        } else {\r\n          return;\r\n        }\r\n      };\r\n    \r\n      return (\r\n        <div id=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"search-box\"\r\n            onChange={handleChange}\r\n            onKeyDown={handleEnter}\r\n          />\r\n          <button id=\"search-button\" type=\"button\" onClick={handleClick}>\r\n            Search\r\n          </button>\r\n        </div>\r\n      );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function DetailedResult(props) {\r\n\r\n    // test whether detailed results were found successfully\r\n    const found = typeof props.selected === \"object\" ? true : false;\r\n    let details = [];\r\n    let title = \"\";\r\n    let year = \"\";\r\n    let poster = \"\";\r\n\r\n    // more detailed results for the clicked result item are destructured and put into an array\r\n    if (typeof props.selected === \"object\") {\r\n        const { \"Director\": director, \"Writer\": writer, \"Actors\": actors, \"Rated\": rated, \"Runtime\": runtime, \"Genre\": genre, \"Language\": language, \"Country\": country, \"Plot\": plot, \"imdbRating\": rating, \"imdbVotes\": votes } = props.selected;\r\n        title = props.selected[\"Title\"];\r\n        year = props.selected[\"Year\"];\r\n        poster = props.selected[\"Poster\"];\r\n     details = [\r\n        [\"Director\", director],\r\n        [\"Writer(s)\", writer],\r\n        [\"Actors\", actors],\r\n        [\"Rated\", rated],\r\n        [\"Runtime\", runtime],\r\n        [\"Language\", language],\r\n        [\"Country\", country],\r\n        [\"Genre\", genre],\r\n        [\"IMDB Rating\", rating + \" (based on \" + votes + \" votes)\"],\r\n        [\"Plot\", plot]\r\n    ];\r\n    }\r\n\r\n    return (\r\n        <div id=\"detailed-results\" onClick={null}>\r\n            <i className=\"fas fa-times-circle\" id=\"exit-details\"></i>\r\n            {!found && <p>{props.selected}</p>}\r\n            {found && <img src={poster} alt=\"film poster\" />}\r\n            {found && <div id=\"detailed-info\">\r\n                <h2>{title}</h2>\r\n                <h3>{year}</h3>\r\n                <ul id=\"detailed-info-list\">\r\n                    {details.map((elem, index) => <li className=\"detailed-info-item\" key={index}><b>{elem[0]}:</b> {elem[1]}</li>)}\r\n                </ul>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ResultItem(props) {\r\n    return (\r\n        <div id={props.index} className=\"result-item\" onClick={props.toggleDetails}>\r\n          <img src={props.elem[\"Poster\"]} alt=\"film poster\" className=\"result-image\" />\r\n          <p className=\"result-title\">{props.elem[\"Title\"]}</p>\r\n          <p className=\"result-year\">{props.elem[\"Year\"]}</p>\r\n        </div>\r\n      );\r\n}\r\n","import React from 'react';\r\nimport DetailedResult from './DetailedResult.js';\r\nimport ResultItem from './ResultItem.js';\r\nimport callApi from '../js/callApi';\r\n\r\nexport default function Results(props) {\r\n    // state that changes if a single result item is expanded for more details\r\n  const [overlay, setOverlay] = React.useState(false);\r\n  const [selected, setSelected] = React.useState({});\r\n\r\n  // click handler that either shows detailed results for a result item if that item is clicked or hides those results if the background or exit button is clicked\r\n  const toggleDetails = (e) => {\r\n    if (e.target.id === \"detailed-results\") {\r\n      return;\r\n    } else if (e.target.id === \"overlay\" || e.target.id === \"exit-details\") {\r\n      setSelected({});\r\n      setOverlay(false);\r\n    } else {\r\n      callApi(\"title\", {id: props.info.results[e.target.id][\"imdbID\"]}, setSelected);\r\n      setOverlay(true);\r\n    }\r\n  };\r\n\r\n  // establish what the main text of the page says based on the state of the search\r\n  const firstRange = props.info.page * 20 - 19;\r\n  const lastRange = props.info.page * 20 > props.info.total\r\n  ? props.info.total\r\n  : props.info.page * 20;\r\n  const text =\r\n    props.info.success === \"success\"\r\n      ? `Showing results ${firstRange}-${lastRange} of ${props.info.total} for \"${props.info.searched}\"`\r\n      : props.info.success === \"fail\"\r\n      ? \"No results found.\"\r\n      : props.info.success === \"initial\"\r\n      ? \"Search films by title.\"\r\n      : \"\";\r\n\r\n  return (\r\n    <main id=\"results\">\r\n      {props.info.success === \"load\" && (\r\n        <img\r\n          src=\"https://s4.gifyu.com/images/808.gif\"\r\n          alt=\"loading...\"\r\n          id=\"load\"\r\n        />\r\n      )}\r\n      <p id=\"current-description\">{text}</p>\r\n      {props.info.success === \"success\" && (\r\n        <div id=\"labels\" className=\"result-item\">\r\n          <h2 className=\"result-image\">Poster</h2>\r\n          <h2 className=\"result-title\">Title</h2>\r\n          <h2 className=\"result-author\">Year</h2>\r\n        </div>\r\n      )}\r\n      {props.info.success === \"success\" &&\r\n        props.info.results.map((elem, index) => {\r\n          return (\r\n            <ResultItem\r\n              index={index}\r\n              elem={elem}\r\n              toggleDetails={toggleDetails}\r\n              key={index}\r\n            />\r\n          );\r\n        })}\r\n      {overlay && (\r\n        <div id=\"overlay\" onClick={toggleDetails}>\r\n          <DetailedResult selected={selected} />\r\n        </div>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { PaginationItem, PaginationLink } from 'reactstrap';\r\n\r\nexport default function PageLink(props) {\r\n    // converts the label for the first and last pagination buttons into a number that corresponds to the first and last pages\r\n  let data = props.label === \"«\" \r\n  ? 1 \r\n  : props.label === \"»\" \r\n  ? props.final \r\n  : props.label;\r\n\r\n  return (\r\n    <PaginationItem\r\n      className={props.current === props.label ? \"page-item active\" : \"page-item\"}\r\n    >\r\n      <PaginationLink\r\n        href=\"#\"\r\n        data-page={data}\r\n        onClick={props.change}\r\n      >\r\n        {props.label}\r\n      </PaginationLink>\r\n    </PaginationItem>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PageLink from './PageLink.js';\r\nimport { Pagination } from 'reactstrap';\r\nimport callApi from '../js/callApi';\r\n\r\nexport default function Pages(props) {\r\n   // calculates the final and current page numbers based on the total number of pages from the API data and from the current page number in App's state\r\n  const final = Math.ceil(props.info.total / 20);\r\n  const current = parseInt(props.info.page);\r\n\r\n  // an array of labels for pagination that updates dynamically based on the current page\r\n  const pageNumbers = [\r\n    \"«\",\r\n    current - 2,\r\n    current - 1,\r\n    current,\r\n    current + 1,\r\n    current + 2,\r\n    \"»\"\r\n  ];\r\n\r\n  // this filters the array to only show page numbers above 0 and up to the final page\r\n  const displayedPages = pageNumbers.filter(\r\n    (elem) => (0 < elem && elem <= final) || typeof elem === \"string\"\r\n  );\r\n\r\n  const pageChange = (e) => {\r\n    // prevents the page from moving to top before the new results have loaded\r\n    e.preventDefault();\r\n\r\n    // determines the new page of results to fetch from the API based on a data attribute on the pagination button\r\n    const newPage = e.target.getAttribute(\"data-page\");\r\n\r\n    callApi(\"search\", { query: props.info.searched, page: newPage }, props.setters);\r\n  };\r\n\r\n  return (\r\n    <Pagination aria-label=\"results navigation\" id=\"pagination-bar\">\r\n      {displayedPages.map((elem, index) => {\r\n        return (\r\n          <PageLink\r\n            key={index}\r\n            current={current}\r\n            label={elem}\r\n            final={final}\r\n            change={pageChange}\r\n          />\r\n        );\r\n      })}\r\n    </Pagination>\r\n  );\r\n}\r\n","import React from 'react';\nimport Search from './components/Search.js';\nimport Results from './components/Results.js';\nimport Pages from './components/Pages.js';\n\nfunction App() {\n   // scrolls the page to the top any time the app component is reloaded, ie, when new results show up after clicking a new page\n   React.useEffect(() => {\n    window.scrollTo(0, 0);\n  });\n\n  // the app's state, respectively: the fetched results from the api, the \"mode\" of the app, whether it be loading, initial, or successfully or unsuccessfully found a list of books, the current page number, the total number of results, the active query being entered, and the searchd query that the results are linked to\n  const [results, setResults] = React.useState([]);\n  const [success, setSuccess] = React.useState(\"initial\");\n  const [page, setPage] = React.useState(1);\n  const [total, setTotal] = React.useState(0);\n  const [query, setQuery] = React.useState(\"\");\n  const [searched, setSearched] = React.useState(\"\");\n\n  return (\n    <div id=\"app\">\n      <header id=\"header\">\n        <h1>\n          Film<span id=\"find\">Find</span>\n        </h1>\n        <Search\n          setters={{\n            results: setResults,\n            success: setSuccess,\n            page: setPage,\n            total: setTotal,\n            query: setQuery,\n            searched: setSearched\n          }}\n          query={query}\n        />\n      </header>\n      <Results info={{ results, success, searched, total, page }} />\n      {success === \"success\" && (\n        <Pages\n          info={{ page, total, searched }}\n          setters={{\n            results: setResults,\n            success: setSuccess,\n            page: setPage,\n            total: setTotal\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}